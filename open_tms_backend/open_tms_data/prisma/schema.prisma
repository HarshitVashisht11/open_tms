datasource db {
  provider = "postgresql"
  url      = env("BB_OPEN_TMS_BACKEND_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model tenant {
  id           String    @id @default(uuid())
  name         String    @unique
  display_name String    @unique
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt

  organisation_tenant_fk organisation[] @relation("organisation_tenant_id")
}

model organisation {
  id                String    @id @default(uuid())
  name              String
  display_name      String
  license_no        String?
  logo_url          String?
  years_in_business String?
  created_by        String?
  updated_by        String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt
  tenant_id         String?

  org_member_fk org_member[] @relation("org_member_organisation_id")

  organisation_tenant_id  tenant?  @relation("organisation_tenant_id", fields: [tenant_id], references: [id])
  organisation_created_by user?    @relation("organisation_created_by", fields: [created_by], references: [id])
  organisation_updated_by user?    @relation("organisation_updated_by", fields: [updated_by], references: [id])
  organisation_ticket_fk  ticket[] @relation("ticket_organisation_id")
  organisation_process_fk  process[] @relation("process__organisation_id")
}

model user {
  id                String  @id @default(uuid())
  first_name        String
  middle_name       String?
  last_name         String?
  country_code      String?
  phn_no            String? @unique
  display_name      String
  display_picture   String?
  status            Int     @default(4)
  is_email_verified Boolean @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  organisation_created_by_fk                organisation[]                @relation("organisation_created_by")
  organisation_updated_by_fk                organisation[]                @relation("organisation_updated_by")
  org_member_created_by_fk                  org_member[]                  @relation("org_member_created_by")
  org_member_updated_by_fk                  org_member[]                  @relation("org_member_updated_by")
  process_created_by_fk                     process[]                     @relation("process_created_by")
  process_updated_by_fk                     process[]                     @relation("process_updated_by")
  stage_created_by_fk                       stage[]                       @relation("stage_created_by")
  stage_updated_by_fk                       stage[]                       @relation("stage_updated_by")
  process_path_created_by_fk                process_path[]                @relation("process_path_created_by")
  process_path_updated_by_fk                process_path[]                @relation("process_path_updated_by")
  ticket_revision_attachments_created_by_fk ticket_revision_attachments[] @relation("ticket_revision_attachments_created_by")
  ticket_revision_attachments_updated_by_fk ticket_revision_attachments[] @relation("ticket_revision_attachments_updated_by")
  ticket_created_by_fk                      ticket[]                      @relation("ticket_created_by")
  ticket_updated_by_fk                      ticket[]                      @relation("ticket_updated_by")
  ticket_revision_created_by_fk             ticket_revision[]             @relation("ticket_revision_created_by")
  ticket_revision_updated_by_fk             ticket_revision[]             @relation("ticket_revision_updated_by")
  ticket_activity_created_by_fk             ticket_activity[]             @relation("ticket_activity_created_by")
  ticket_activity_updated_by_fk             ticket_activity[]             @relation("ticket_activity_updated_by")

  department_users_fk department_users[] @relation("department_users_user_id")

  org_member_roles_fk org_member_roles[] @relation("org_member_roles_user")

  user_email_user_id_fk       user_email[]               @relation("user_email_user_id")
  user_user_authentication_fk user_authentication_info[] @relation("user_authentication_info_user_id")
}

model user_email {
  id         String    @id @default(uuid())
  email      String
  email_type Int // 0 primary 1 secondary
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  user_id    String

  user_email_user_id user @relation("user_email_user_id", fields: [user_id], references: [id])

  @@unique([email, email_type], name: "emailIdentifier")
}

model user_authentication_info {
  id            String    @id @default(uuid())
  password_hash String?
  password_salt String?
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt
  user_id       String

  user_id_fk user @relation("user_authentication_info_user_id", fields: [user_id], references: [id])
}

//table used for entities which can be assigned a ticket.This is a link table
model org_member {
  id              String    @id @default(uuid())
  name            String
  display_name    String
  type            Int // to determine the type of entity.1 for user and 2 for department
  created_by      String?
  updated_by      String?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
  organisation_id String

  org_member_organisation_id organisation? @relation("org_member_organisation_id", fields: [organisation_id], references: [id])

  org_member_created_by user? @relation("org_member_created_by", fields: [created_by], references: [id])

  org_member_updated_by user? @relation("org_member_updated_by", fields: [updated_by], references: [id])

  org_member_roles_fk           org_member_roles[] @relation("org_member_roles_id")
  org_member_department_fk      department[]       @relation("department_id")
  org_member_ticket_activity_fk ticket_activity[]  @relation("ticket_activity_assignee_id")
}

model org_member_roles {
  id      String  @id
  user_id String?
  role_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  org_member_roles_id_fk   org_member? @relation("org_member_roles_id", fields: [id], references: [id])
  org_member_roles_user_fk user?       @relation("org_member_roles_user", fields: [user_id], references: [id])
  org_member_roles_role_fk roles?      @relation("org_member_roles_roles", fields: [role_id], references: [id])
}

model roles {
  id           String    @id @default(uuid())
  name         String
  display_name String
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt

  org_member_roles_fk org_member_roles[] @relation("org_member_roles_roles")
  department_users_fk department_users[] @relation("department_users_role_id")
}

model department {
  id         String    @id
  name       String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  department_id_fk    org_member?        @relation("department_id", fields: [id], references: [id])
  department_users_fk department_users[] @relation("department_users_department_id")
}

model department_users {
  id            String  @id @default(uuid())
  user_id       String?
  role_id       String?
  department_id String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  department_users_user_id_fk user?  @relation("department_users_user_id", fields: [user_id], references: [id])
  department_users_role_id_fk roles? @relation("department_users_role_id", fields: [role_id], references: [id])

  department_users_department_id_fk department? @relation("department_users_department_id", fields: [department_id], references: [id])
}

model process {
  id              String    @id
  name            String    @unique //for internal use
  display_name    String    @unique
  created_by      String?
  updated_by      String?
  organisation_id String?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt

  process__organisation_id       organisation?     @relation("process__organisation_id", fields: [organisation_id], references: [id])
  process_created_by user? @relation("process_created_by", fields: [created_by], references: [id])

  process_updated_by user? @relation("process_updated_by", fields: [updated_by], references: [id])

  stage_process_id_fk                 stage[]           @relation("stage_process_id")
  stage_ticket_revision_process_id_fk ticket_revision[] @relation("ticket_revision_process_id")
}

model stage {
  id           String    @id
  name         String    @unique //for internal use
  display_name String    @unique
  type         Int?
  created_by   String?
  updated_by   String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  is_start     Boolean? //toggle to identify whether the stage is the first stage
  is_end       Boolean? //toggle to identify whether the stage is any of the last stages
  process_id   String?

  stage_created_by                 user?             @relation("stage_created_by", fields: [created_by], references: [id])
  stage_updated_by                 user?             @relation("stage_updated_by", fields: [updated_by], references: [id])
  stage_process_id                 process?          @relation("stage_process_id", fields: [process_id], references: [id])
  process_path_from_stage_fk       process_path[]    @relation("process_path_from_stage")
  process_path_to_stage_fk         process_path[]    @relation("process_path_to_stage")
  ticket_activity_current_stage_fk ticket_activity[] @relation("ticket_activity_current_stage")
}

model process_path {
  id           String    @id @default(uuid())
  name         String    @unique //fo internal use
  display_name String    @unique
  created_by   String?
  updated_by   String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  from_stage   String?
  to_stage     String?
  process_id   String

  process_path_created_by user?  @relation("process_path_created_by", fields: [created_by], references: [id])
  process_path_updated_by user?  @relation("process_path_updated_by", fields: [updated_by], references: [id])
  process_path_from_stage stage? @relation("process_path_from_stage", fields: [from_stage], references: [id])
  process_path_to_stage   stage? @relation("process_path_to_stage", fields: [to_stage], references: [id])
}

model ticket_revision_attachments {
  id                 String    @id @default(uuid())
  ticket_revision_id String
  name               String?
  url                String
  key                String?
  created_by         String?
  updated_by         String?
  created_at         DateTime? @default(now())
  updated_at         DateTime? @updatedAt

  ticket_revision_attachments_created_by user? @relation("ticket_revision_attachments_created_by", fields: [created_by], references: [id])
  ticket_revision_attachments_updated_by user? @relation("ticket_revision_attachments_updated_by", fields: [updated_by], references: [id])
}

model ticket {
  id              String    @id @default(uuid())
  status          Int       @default(0) // open
  created_by      String?
  updated_by      String?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
  request_id      String
  organisation_id String

  ticket_organisation_id       organisation?     @relation("ticket_organisation_id", fields: [organisation_id], references: [id])
  ticket_created_by            user?             @relation("ticket_created_by", fields: [created_by], references: [id])
  ticket_updated_by            user?             @relation("ticket_updated_by", fields: [updated_by], references: [id])
  ticket_revision_ticket_id_fk ticket_revision[] @relation("ticket_revision_ticket_id")
}

model ticket_revision {
  id                  String    @id @default(uuid())
  title               String?
  description         String?
  project_name        String
  project_description String
  ticket_note         String?
  reject_note         String?
  resubmit_note       String?
  invoice_no          String
  status              Int       @default(0)
  created_by          String?
  updated_by          String?
  created_at          DateTime? @default(now())
  updated_at          DateTime? @updatedAt
  process_id          String?
  ticket_id           String
  page                Int
  next_revision_id    String?   @default(uuid())

  ticket_revision_created_by            user?             @relation("ticket_revision_created_by", fields: [created_by], references: [id])
  ticket_revision_updated_by            user?             @relation("ticket_revision_updated_by", fields: [updated_by], references: [id])
  ticket_revision_process_id            process?          @relation("ticket_revision_process_id", fields: [process_id], references: [id])
  ticket_revision_ticket_id             ticket?           @relation("ticket_revision_ticket_id", fields: [ticket_id], references: [id], onDelete: Cascade)
  ticket_activity_ticket_revision_id_fk ticket_activity[] @relation("ticket_activity_ticket_revision_id")
}

model ticket_activity {
  id                 String    @id @default(uuid())
  created_by         String?
  updated_by         String?
  created_at         DateTime? @default(now())
  updated_at         DateTime? @updatedAt
  assignee_id        String?
  current_stage      String? // draft --> 5 th pending
  ticket_revision_id String

  ticket_activity_created_by         user?            @relation("ticket_activity_created_by", fields: [created_by], references: [id])
  ticket_activity_updated_by         user?            @relation("ticket_activity_updated_by", fields: [updated_by], references: [id])
  ticket_activity_assignee_id        org_member?      @relation("ticket_activity_assignee_id", fields: [assignee_id], references: [id])
  ticket_activity_current_stage      stage?           @relation("ticket_activity_current_stage", fields: [current_stage], references: [id])
  ticket_activity_ticket_revision_id ticket_revision? @relation("ticket_activity_ticket_revision_id", fields: [ticket_revision_id], references: [id], onDelete: Cascade)
}

//Workflows 
// Tenant insert will be predefined by the backend db.As of now 1 tenant can only have 1 super admin

//Creating organisation
// Before inserting organisation and user member has to to inserted.So member type 1 will be organisation and member type 2 will be user
// Organisation can have multiple types.So while creating an organisation insert into organisation table and also insert into organisation types table
// For organisation types table type 1 means super admin ,2 means bank, 3 means general contractor (GC), 4 means sub contractor (SC)

//creating users
//While creating users insert first into member with type 2.Then insert into users table.Then insert into userEmails and user authentication info table 

//creating process
//Insert into process table with the name,display_name and the audit data(created_at,updated_at,created_by,updated_by)
//Create multiple stages for the process by inserting into stages with name,display_name, process_id,is_star,is_end ( for starting stage and ending stages) as the foreign key and also the audit data
//Insert into process paths table with the name,display_name,from_stage and to_stage as foreign keys as well as audit data

// First create a ticket by inserting into tickets table with audit data as well as status 1(open)
// Then create a ticket revision by inserting into ticket revision with ticket_id as well as process_id as foreign keys and status and audit data
// as well as a payload (json column) for storing arr specific data
//Then for every activity that takes place on the ticket insert into ticket_activity table with ticket_revision_id,assignee_id,current_stage as foreign keys as well as audit data.
// When ticket is closed change the status of ticket revision to closed and thus ticket is closed

// When the ticket has to go through a different process
// create new ticket revision with the same old ticket_id as foreign key and activity log
// then create ticket activites with the newly created ticket_revision_id as foreign key.
